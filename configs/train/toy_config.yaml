# configs/train/toy_config.yaml

files:
  # Hugging Face датасет DigiCam MIRFlickr (25k пар "lensless↔lensed")
  dataset: bezzam/DigiCam-Mirflickr-SingleMask-25K
  split: train             # использовать обучающую часть датасета
  n_files: 100             # <<< ограничение на число примеров для быстрой проверки
  test_size: 0.1           # 10% пойдут под валидацию внутри запуска
  cache_dir: null          # можно указать путь (напр., /dev/shm или /tmp/hf_cache)
  # Для DigiCam часто используют симулированный/заданный PSF-файл (см. примеры в слепках Hydra):
  huggingface_psf: psf_simulated_waveprop.png   # имя файла PSF в пакете моделей/ресурсов
  downsample: 2            # при необходимости уменьшить размер входа (ускоряет обучение)
  torch: true
  torch_device: cuda:0     # поменяй на "cpu", если без GPU
  vertical_shift: null
  horizontal_shift: null
  crop: null               # [h,w], если нужно обрезать (оставь null для авто)
  input_snr: 0.0           # без добавления шума на вход
  diffcam_compat: false    # специальный флаг не нужен; оставляем false
  eval_disp_idx: [0, 1, 2, 3, 4]
  test_idx:       [0, 1, 2, 3, 4]


# python scripts/recon/train_learning_based.py -cn digicam
defaults:
  - defaults
  - _self_

wandb_project: toy_config
eval_disp_idx: [1, 2, 4, 5, 9]

# TODO: these parameters should be in the dataset?
alignment:
  # when there is no downsampling
  top_left: [80, 100]  # height, width
  height: 200

# simulate of PSF
simulation:
  use_waveprop: True
  deadspace: True
  scene2mask: 0.3
  mask2sensor: 0.002

training:
  batch_size: 4
  epoch: 25
  eval_batch_size: 4

reconstruction:
  method: unrolled_admm
  unrolled_admm:
    n_iter: 5

  # # Just post-processing (8.2M parameters)
  # post_process: 
  #   network : UnetRes  # UnetRes or DruNet or null
  #   depth : 4 # depth of each up/downsampling layer. Ignore if network is DruNet
  #   nc: [32,64,128,256]

  # # Pre-processing + post-processing (8.1M parameters)
  # pre_process: 
  #   network : UnetRes  # UnetRes or DruNet or null
  #   depth : 4 # depth of each up/downsampling layer. Ignore if network is DruNet
  #   nc: [32,64,116,128]
  # post_process: 
  #   network : UnetRes  # UnetRes or DruNet or null
  #   depth : 4 # depth of each up/downsampling layer. Ignore if network is DruNet
  #   nc: [32,64,116,128]

  # Pre-processing + post-processing + PSF correction (8.1M parameters)
  psf_network: [4,8,16,32]
  pre_process: 
    network : UnetRes  # UnetRes or DruNet or null
    depth : 4 # depth of each up/downsampling layer. Ignore if network is DruNet
    nc: [32,64,112,128]
  post_process: 
    network : UnetRes  # UnetRes or DruNet or null
    depth : 4 # depth of each up/downsampling layer. Ignore if network is DruNet
    nc: [32,64,116,128]
